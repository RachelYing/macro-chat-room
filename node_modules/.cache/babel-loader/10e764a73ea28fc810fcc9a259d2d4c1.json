{"ast":null,"code":"import { UPLOAD_FAIL, REGISTER, REGISTER_REQUESTED, REGISTER_SUCCESSFUL, REGISTER_FAILED, LOGIN, LOGOUT, LOGIN_INVALID, LOGIN_SUCCESSFUL, REQUEST_ACCEPTED, REQUEST_TO_JOIN, LOGIN_REQUESTED, LOGIN_ERROR, UPDATE_MESSAGES, UPDATE_PARTICIPANTS, OPEN_TUTORIAL, CLOSE_TUTORIAL } from \"./actionTypes\";\nimport { joinGame } from \"../client\";\nimport firebase from \"../data/fbConfig\";\nimport 'firebase/firestore';\nimport 'firebase/storage';\nexport const login = user => ({\n  type: LOGIN,\n  payload: user\n});\n\nconst registerRequested = () => ({\n  type: REGISTER_REQUESTED\n});\n\nconst registerNewUserSuccessful = () => ({\n  type: REGISTER_SUCCESSFUL\n});\n\nconst registerNewUserFailed = () => ({\n  type: REGISTER_FAILED\n});\n\nexport const logout = () => ({\n  type: LOGOUT\n});\nexport const loginSuccessful = () => ({\n  type: LOGIN_SUCCESSFUL\n});\nexport const invalidLogin = () => ({\n  type: LOGIN_INVALID\n});\nexport const loginRequested = () => ({\n  type: LOGIN_REQUESTED\n});\nexport const uploadFailed = () => ({\n  type: UPLOAD_FAIL\n});\nexport const loginError = error => ({\n  type: LOGIN_ERROR,\n  payload: error\n});\n\nconst requested = () => {\n  return {\n    type: REQUEST_TO_JOIN\n  };\n};\n\nconst requestAccepted = result => {\n  return {\n    type: REQUEST_ACCEPTED,\n    payload: {\n      selfId: result.clientId,\n      participants: result.participants,\n      messages: result.messages\n    }\n  };\n};\n\nconst joinRoom = (userName, headPortrait) => {\n  return dispatch => {\n    dispatch(requested());\n    joinGame(userName, headPortrait, result => {\n      dispatch(requestAccepted(result));\n    });\n  };\n};\n\nexport const validateLogin = (userName, password) => {\n  return dispatch => {\n    dispatch(loginRequested());\n    const database = firebase.firestore();\n    database.collection(\"users\").where(\"username\", \"==\", userName).where(\"password\", \"==\", password).get().then(querySnapshot => {\n      if (querySnapshot.size === 1) {\n        const doc = querySnapshot.docs[0];\n        const user = {\n          currentUser: doc.id,\n          userName: userName,\n          headPortrait: doc.get('headportrait')\n        };\n        dispatch(loginSuccessful()); // join the room after log in\n\n        dispatch(joinRoom(userName, doc.get('headportrait')));\n        dispatch(login(user));\n      } else {\n        dispatch(invalidLogin());\n      }\n    }).catch(error => {\n      dispatch(loginError(error));\n    });\n  };\n};\nexport const updateMessages = messages => {\n  return {\n    type: UPDATE_MESSAGES,\n    payload: messages\n  };\n};\nexport const updateParticipants = participantS => {\n  return {\n    type: UPDATE_PARTICIPANTS,\n    payload: participantS\n  };\n};\nexport const register = (userName, password, filePath = undefined, file = undefined) => {\n  return dispatch => {\n    dispatch(registerRequested());\n\n    if (filePath !== undefined && file !== undefined) {\n      const storage = firebase.storage();\n      const storageRef = storage.ref();\n      const img = storageRef.child(filePath);\n      img.put(file).then(result => {\n        img.getDownloadURL().then(function (url) {\n          dispatch(cregisterWithHeadPortrait(userName, password, url));\n        }).catch(error => {\n          console.log(error);\n          dispatch(uploadFailed());\n        });\n      }).catch(error => {\n        console.log(error);\n        dispatch(uploadFailed());\n      });\n    } else {\n      const database = firebase.firestore();\n      database.collection(\"users\").add({\n        username: userName,\n        password: password\n      }).then(newDoc => {\n        newDoc.id.length > 0 ? dispatch(registerNewUserSuccessful()) : dispatch(registerNewUserFailed());\n      });\n    }\n  };\n};\n\nconst cregisterWithHeadPortrait = (userName, password, imageUrl) => {\n  return dispatch => {\n    const database = firebase.firestore();\n    database.collection(\"users\").add({\n      username: userName,\n      password: password,\n      headportrait: imageUrl\n    }).then(newDoc => {\n      newDoc.id.length > 0 ? dispatch(registerNewUserSuccessful()) : dispatch(registerNewUserFailed());\n    });\n  };\n};\n\nexport const closeTutorial = () => {\n  console.log('closeTutorialcloseTutorialcloseTutorial');\n  return {\n    type: CLOSE_TUTORIAL\n  };\n};\nexport const openTutorial = () => {\n  console.log('openTutorialcloseTutorialcloseTutorial');\n  return {\n    type: OPEN_TUTORIAL\n  };\n};","map":{"version":3,"sources":["/Users/racheldi/Desktop/milkNbread/micro-chat-room/src/redux/actions.js"],"names":["UPLOAD_FAIL","REGISTER","REGISTER_REQUESTED","REGISTER_SUCCESSFUL","REGISTER_FAILED","LOGIN","LOGOUT","LOGIN_INVALID","LOGIN_SUCCESSFUL","REQUEST_ACCEPTED","REQUEST_TO_JOIN","LOGIN_REQUESTED","LOGIN_ERROR","UPDATE_MESSAGES","UPDATE_PARTICIPANTS","OPEN_TUTORIAL","CLOSE_TUTORIAL","joinGame","firebase","login","user","type","payload","registerRequested","registerNewUserSuccessful","registerNewUserFailed","logout","loginSuccessful","invalidLogin","loginRequested","uploadFailed","loginError","error","requested","requestAccepted","result","selfId","clientId","participants","messages","joinRoom","userName","headPortrait","dispatch","validateLogin","password","database","firestore","collection","where","get","then","querySnapshot","size","doc","docs","currentUser","id","catch","updateMessages","updateParticipants","participantS","register","filePath","undefined","file","storage","storageRef","ref","img","child","put","getDownloadURL","url","cregisterWithHeadPortrait","console","log","add","username","newDoc","length","imageUrl","headportrait","closeTutorial","openTutorial"],"mappings":"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","sourcesContent":["import { UPLOAD_FAIL, REGISTER, REGISTER_REQUESTED, REGISTER_SUCCESSFUL, REGISTER_FAILED, LOGIN, LOGOUT, LOGIN_INVALID, LOGIN_SUCCESSFUL, REQUEST_ACCEPTED, REQUEST_TO_JOIN, LOGIN_REQUESTED, LOGIN_ERROR, UPDATE_MESSAGES, UPDATE_PARTICIPANTS, OPEN_TUTORIAL, CLOSE_TUTORIAL } from \"./actionTypes\";\nimport { joinGame } from \"../client\";\n\nimport firebase from \"../data/fbConfig\"\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nexport const login = (user) => ({\n  type: LOGIN,\n  payload: user\n})\n\nconst registerRequested = () => ({ type: REGISTER_REQUESTED });\n\nconst registerNewUserSuccessful = () => ({\n  type: REGISTER_SUCCESSFUL,\n})\n\nconst registerNewUserFailed = () => ({\n  type: REGISTER_FAILED,\n})\n\nexport const logout = () => ({ type: LOGOUT });\n\nexport const loginSuccessful = () => ({ type: LOGIN_SUCCESSFUL });\n\nexport const invalidLogin = () => ({ type: LOGIN_INVALID });\n\nexport const loginRequested = () => ({ type: LOGIN_REQUESTED });\n\nexport const uploadFailed = () => ({ type: UPLOAD_FAIL })\n\nexport const loginError = (error) => ({\n  type: LOGIN_ERROR,\n  payload: error\n})\n\nconst requested = () => {\n  return ({ type: REQUEST_TO_JOIN })\n}\n\nconst requestAccepted = result => {\n  return (\n    {\n      type: REQUEST_ACCEPTED,\n      payload: {\n        selfId: result.clientId,\n        participants: result.participants,\n        messages: result.messages,\n      }\n    })\n}\n\nconst joinRoom = (userName, headPortrait) => {\n  return dispatch => {\n    dispatch(requested())\n    joinGame(userName, headPortrait, result => {\n      dispatch(requestAccepted(result));\n    })\n  }\n}\n\n\nexport const validateLogin = (userName, password) => {\n  return dispatch => {\n    dispatch(loginRequested());\n    const database = firebase.firestore();\n    database.collection(\"users\").where(\"username\", \"==\", userName).where(\"password\", \"==\", password)\n      .get()\n      .then((querySnapshot) => {\n        if (querySnapshot.size === 1) {\n          const doc = querySnapshot.docs[0];\n          const user = {\n            currentUser: doc.id,\n            userName: userName,\n            headPortrait: doc.get('headportrait'),\n          }\n          dispatch(loginSuccessful())\n          // join the room after log in\n          dispatch(joinRoom(userName, doc.get('headportrait')))\n          dispatch(login(user));\n        }\n        else {\n          dispatch(invalidLogin());\n        }\n      })\n      .catch(error => {\n        dispatch(loginError(error))\n      });\n  }\n}\n\nexport const updateMessages = messages => {\n  return (\n    {\n      type: UPDATE_MESSAGES,\n      payload: messages\n    })\n}\n\nexport const updateParticipants = participantS => {\n  return (\n    {\n      type: UPDATE_PARTICIPANTS,\n      payload: participantS\n    })\n}\n\nexport const register = (userName, password, filePath = undefined, file = undefined) => {\n\n  return dispatch => {\n    dispatch(registerRequested());\n    if (filePath !== undefined && file !== undefined) {\n      const storage = firebase.storage();\n      const storageRef = storage.ref();\n      const img = storageRef.child(filePath);\n      img.put(file)\n        .then(result => {\n\n          img.getDownloadURL()\n            .then(function (url) {\n\n              dispatch(cregisterWithHeadPortrait(userName, password, url));\n            })\n            .catch(error => {\n              console.log(error);\n              dispatch(uploadFailed());\n            })\n        })\n        .catch(error => {\n          console.log(error);\n          dispatch(uploadFailed());\n        })\n    } else {\n      const database = firebase.firestore();\n      database.collection(\"users\")\n        .add({\n          username: userName,\n          password: password,\n        })\n        .then(newDoc => {\n          newDoc.id.length > 0 ?\n            dispatch(registerNewUserSuccessful()) :\n            dispatch(registerNewUserFailed());\n        })\n    }\n  }\n};\n\nconst cregisterWithHeadPortrait = (userName, password, imageUrl) => {\n  return dispatch => {\n    const database = firebase.firestore();\n    database.collection(\"users\")\n      .add({\n        username: userName,\n        password: password,\n        headportrait: imageUrl,\n      })\n      .then(newDoc => {\n        newDoc.id.length > 0 ?\n          dispatch(registerNewUserSuccessful()) :\n          dispatch(registerNewUserFailed());\n      })\n  }\n}\n\nexport const closeTutorial = () => {\n  console.log('closeTutorialcloseTutorialcloseTutorial');\n  return {\n    type: CLOSE_TUTORIAL\n  }\n}\n\nexport const openTutorial = () => {\n  console.log('openTutorialcloseTutorialcloseTutorial');\n  return {\n    type: OPEN_TUTORIAL\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}