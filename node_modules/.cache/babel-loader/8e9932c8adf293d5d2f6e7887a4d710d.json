{"ast":null,"code":"const socketIOClient = require(\"socket.io-client\"); // When deployed, connect to the hosted server, otherwise connect to local server\n\n\nlet host = process.env.NODE_ENV === 'production' ? \"micro-chat-room.herokuapp.com\" : \"localhost:8002\"; // let host =  \"localhost:8002\";\n\nlet socket = socketIOClient.connect(host, {\n  secure: true\n});\nconsole.log(\"connected to \" + host);\nsocket.on(\"notification\", message => {\n  console.log(message);\n});\nsocket.on(\"participants updated\", participants => {\n  document.dispatchEvent(new CustomEvent(\"participantsupdated\", {\n    detail: participants\n  }));\n});\nsocket.on(\"messages updated\", messages => {\n  document.dispatchEvent(new CustomEvent(\"messagesupdated\", {\n    detail: messages\n  }));\n});\nexport const joinGame = (userName, headPortrait, callbackFunc) => {\n  console.log(\"joining\");\n  socket.emit(\"request to join\", {\n    userName: userName,\n    headPortrait: headPortrait\n  });\n  socket.on(\"join result\", result => {\n    callbackFunc(result);\n  });\n};\nexport const newMessage = (message, userName, headPortrait) => {\n  socket.emit(\"new message\", {\n    content: message,\n    userName: userName,\n    headPortrait: headPortrait\n  });\n};\nexport const hideMessage = (messageId, userName) => socket.emit(\"hide a message\", {\n  messageId: messageId,\n  userName: userName\n});\nexport const thumbUpMessage = (messageId, userName) => socket.emit(\"thumb up a message\", {\n  messageId: messageId,\n  userName: userName\n});\nexport const thumbDownMessage = (messageId, userName) => socket.emit(\"thumb down a message\", {\n  messageId: messageId,\n  userName: userName\n});\nexport const addCommentToMessage = (messageId, userName, comment) => socket.emit(\"comment a message\", {\n  messageId: messageId,\n  userName: userName,\n  comment: comment\n});\nexport const leaveRoom = () => {\n  socket.emit(\"leave the room\");\n};","map":{"version":3,"sources":["/Users/racheldi/Desktop/milkNbread/micro-chat-room/src/client.js"],"names":["socketIOClient","require","host","process","env","NODE_ENV","socket","connect","secure","console","log","on","message","participants","document","dispatchEvent","CustomEvent","detail","messages","joinGame","userName","headPortrait","callbackFunc","emit","result","newMessage","content","hideMessage","messageId","thumbUpMessage","thumbDownMessage","addCommentToMessage","comment","leaveRoom"],"mappings":"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","sourcesContent":["const socketIOClient = require(\"socket.io-client\");\n\n// When deployed, connect to the hosted server, otherwise connect to local server\nlet host = process.env.NODE_ENV === 'production' ?\n    \"micro-chat-room.herokuapp.com\" : \"localhost:8002\"   \n// let host =  \"localhost:8002\";\nlet socket = socketIOClient.connect(host, { secure: true });\n\nconsole.log(\"connected to \" + host);\n\nsocket.on(\"notification\", message => {\n    console.log(message);\n});\n\nsocket.on(\"participants updated\", participants => {\n    document.dispatchEvent(new CustomEvent(\"participantsupdated\", { detail: participants }));\n});\n\nsocket.on(\"messages updated\", messages => {\n    document.dispatchEvent(new CustomEvent(\"messagesupdated\", { detail: messages }));\n})\n\nexport const joinGame = (userName, headPortrait,callbackFunc) => {\n    console.log(\"joining\");\n    socket.emit(\"request to join\", {userName: userName, headPortrait:headPortrait});\n\n    socket.on(\"join result\", result => {\n        callbackFunc(result);\n    })\n}\n\nexport const newMessage = (message, userName, headPortrait) =>{ \n    socket.emit(\"new message\",{content:message, userName:userName, headPortrait:headPortrait})};\nexport const hideMessage = (messageId, userName) => socket.emit(\"hide a message\", {messageId:messageId, userName:userName});\nexport const thumbUpMessage = (messageId, userName) => socket.emit(\"thumb up a message\", {messageId:messageId, userName:userName});\nexport const thumbDownMessage = (messageId, userName) => socket.emit(\"thumb down a message\",  {messageId:messageId, userName:userName});\nexport const addCommentToMessage = (messageId, userName, comment) => socket.emit(\"comment a message\", {messageId:messageId, userName:userName, comment:comment});\nexport const leaveRoom=()=>{socket.emit(\"leave the room\")};"]},"metadata":{},"sourceType":"module"}